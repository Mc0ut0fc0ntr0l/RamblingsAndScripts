#Alien Vault,
function Get-IPMalwareInfoAV(){
<#

	.SYNOPSIS
	    Get-IPMalwareInfoAV - Will lookup the reputation, Geo Location and Owner of the IP from the Alienvault Open Threat Exchange

	.DESCRIPTION
	    Used to lookup the geo location information from a text based IP list - 1 per line
		
	.EXAMPLE
		PS> Get-IPMalwareInfoAV 8.8.8.8
    .EXAMPLE
        PS> Get-IPMalwareInfoAV -IP 8.8.8.8 -API_Key 349873OI53Y578UIT342S789DK34JH6648SDI7UYU897IYT78SD498I
    .EXAMPLE
        PS> Get-IPMalwareInfoAV -InFilePath C:\users\bobsmith\Desktop\MyIPListToCheck.txt -OutFilePath C:\users\bobsmith\Desktop\IPResult.txt

	.NOTES
		Author: outofC0ntr0l
        Date: 3/13/2015
	.LINK
        

#>
Param(
    [string]$IP,
    [string]$OutFilePath,
    [string]$API_key,
    [string]$InFilePath
  ) #end param
#Ignore Cert Errors
add-type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    
    public class IDontCarePolicy : ICertificatePolicy {
        public IDontCarePolicy() {}
        public bool CheckValidationResult(
            ServicePoint sPoint, X509Certificate cert,
            WebRequest wRequest, int certProb) {
            return true;
        }
    }
"@
   

   
    #table name
    $tabName = "AVOTX"

    #Create Table object
    $table = New-Object system.Data.DataTable “$tabName”

    #Define Columns
    $col1 = New-Object system.Data.DataColumn Organization,([string])
    $col2 = New-Object system.Data.DataColumn City,([string])
    $col3 = New-Object system.Data.DataColumn Country,([string])
    $col4 = New-Object system.Data.DataColumn Code,([string])
    $col5 = New-Object system.Data.DataColumn Reputation,([string])
    $col6 = New-Object system.Data.DataColumn Latitude,([string])
    $col7 = New-Object system.Data.DataColumn Longitude,([string])
    $col8 = New-Object system.Data.DataColumn IPAddress,([string])
    $col9 = New-Object system.Data.DataColumn IsActive,([string])
    $col10 = New-Object system.Data.DataColumn Activity,([string])
    $col11 = New-Object system.Data.DataColumn LastActive,([String])
    $col12 = New-Object system.Data.DataColumn ReputationNumber,([String])
    $col13 = New-Object system.Data.DataColumn Region,([String])

    #Add the Columns
    $table.columns.add($col1)
    $table.columns.add($col2)
    $table.columns.add($col3)
    $table.columns.add($col4)
    $table.columns.add($col5)
    $table.columns.add($col12)
    $table.columns.add($col13)
    $table.columns.add($col6)
    $table.columns.add($col7)
    $table.columns.add($col8)
    $table.columns.add($col9)
    $table.columns.add($col10)
    $table.columns.add($col11)

#Run the webRequest

    [System.Net.ServicePointManager]::CertificatePolicy = new-object IDontCarePolicy
    if ($InFilePath.Length -gt 0)
    {
    Write-host "Input File: $InFilePath" -ForegroundColor Green 
    Write-host -ForegroundColor White "Output File: $OutFilePath"
    Write-Host ""
    Write-host "Please Wait Query Running..."
        $data = Get-Content -Path $InFilePath |
        ForEach-Object {
            $Params = @{api_key=$API_key}
            $headers = @{"X-Requested-With"="powershell"}
            $u1 = "https://www.alienvault.com/apps/api/threat/ip/{0}/?format=json" -f $_
            $resp = Invoke-WebRequest -uri $u1 -Body $Params
            $data =(convert-jsonToXml $resp.Content) 

            #Create a row
            $row = $table.NewRow()

            #Enter data in the row
            $row.IPAddress = $data.root.address."#text"
            $row.Organization = $data.root.geoip.org_name."#text" 
            $row.city = $data.root.geoip.city."#text"
            $row.region = $data.root.geoip.region."#text"
            $row.country = $data.root.geoip.country_name."#text"
            $row.Code = $data.root.geoip.country_code."#text"
            $ev = $data.root.reputation_score."#text"
            if ($ev -gt 0) { $row.Reputation = "Bad" -f $data.root.reputation_score."#text"} else {$row.Reputation = "Good"}
            $row.ReputationNumber = $data.root.reputation_score."#text"
            $row.Latitude = $data.root.geoip.latitude."#text"
            $row.Longitude = $data.root.geoip.longitude."#text"
            $row.IsActive = $data.root.is_active."#text"
            $row.Activity = $data.root.activities.FirstChild.name."#text"
            $row.LastActive = Convert-FromUnixdate $data.root.last_activity."#text"

            #Add the row to the table
            $table.Rows.Add($row)
        }
    }
    else
    {
    Write-Host ""
    Write-host "Please Wait Query Running..."
            $Params = @{api_key=$API_key}
            $headers = @{"X-Requested-With"="powershell"}
            $u1 = "https://www.alienvault.com/apps/api/threat/ip/{0}/?format=json" -f $IP
            $resp = Invoke-WebRequest -uri $u1 -Body $Params
            $data =(convert-jsonToXml $resp.Content) 

            #Create a row
            $row = $table.NewRow()

            #Enter data in the row
            $row.IPAddress = $data.root.address."#text"
            $row.Organization = $data.root.geoip.org_name."#text" 
            $row.city = $data.root.geoip.city."#text"
            $row.region = $data.root.geoip.region."#text"
            $row.country = $data.root.geoip.country_name."#text"
            $row.Code = $data.root.geoip.country_code."#text"
            $ev = $data.root.reputation_score."#text"
            if ($ev -gt 0) { $row.Reputation = "Bad" -f $data.root.reputation_score."#text"} else {$row.Reputation = "Good"}
            $row.ReputationNumber = $data.root.reputation_score."#text"
            $row.Latitude = $data.root.geoip.latitude."#text"
            $row.Longitude = $data.root.geoip.longitude."#text"
            $row.IsActive = $data.root.is_active."#text"
            $row.Activity = $data.root.activities.FirstChild.name."#text"
            if ($data.root.last_activity."#text" -gt 0) {$dt_la =  Convert-FromUnixdate $data.root.last_activity."#text"} else {$dt_la = "None"}
            $row.LastActive = $dt_la

            #Add the row to the table
            $table.Rows.Add($row)
    }




    #NOTE: Now you can also export this table to a CSV file as shown below.
    if($OutFilePath.Length -gt 0)
        {
            $tabCsv = $table | export-csv "$OutFilePath" -noType 
            Write-host "Query Complete"
        }
    else
        {
            #Display the table
            return $table 
        }
        
}
function Convert-JsonToXml {
    PARAM([Parameter(ValueFromPipeline=$true)]
      [string[]]$json)
    BEGIN { 
        $mStream = New-Object System.IO.MemoryStream 
            }
PROCESS {
   $json | Write-Stream -Stream $mStream
}
END {
   $mStream.Position = 0
   try
   {
      $jsonReader = [System.Runtime.Serialization.Json.JsonReaderWriterFactory]::CreateJsonReader($mStream,[System.Xml.XmlDictionaryReaderQuotas]::Max)
      $xml = New-Object Xml.XmlDocument
      $xml.Load($jsonReader)
      $xml
   }
   finally
   {
      $jsonReader.Close()
      $mStream.Dispose()
   }
}
}
function Write-Stream {
PARAM(
   [Parameter(Position=0)]$stream,
   [Parameter(ValueFromPipeline=$true)]$string
)
PROCESS {
  $bytes = $utf8.GetBytes($string)
  $stream.Write( $bytes, 0, $bytes.Length )
}  
}
Function Convert-FromUnixdate ($UnixDate) {
   [timezone]::CurrentTimeZone.ToLocalTime(([datetime]'1/1/1970').AddSeconds($UnixDate))
}
Add-Type -AssemblyName System.ServiceModel.Web, System.Runtime.Serialization
$utf8 = [System.Text.Encoding]::UTF8  